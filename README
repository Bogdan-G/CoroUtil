Originally based off of the Minecraft pathfinding code.

New Features:
-------------

- Contains various fixes, eg: fences, doors, logic blocks are dealt with properly now
- Designed to run on a thread
- Uses a queue system to manage pathfind requests

Some Details:
-------------

- Given its threaded in a game I'd rather not edit base classes in, it does some clever 'temp path' stuff while the thread does its work
- When a Pathfind request is made, the entity is given a fake 1 node path immediately that is at placed a few blocks above their heads, this keeps them still and in a pathfinding state, then when the thread has a path ready, it replaces the fake path data on the entity with the real one

Usage:
------
- Pathfind to entity: PFQueue.getPath(yourent, target, maxPFRange);
- Pathfind to location: PFQueue.getPath(this, x, y, z, maxPFRange);
- Pathfind to entity TOP PRIORITY: PFQueue.getPath(yourent, target, maxPFRange, 1);
- Pathfind to location TOP PRIORITY: PFQueue.getPath(this, x, y, z, maxPFRange, 1);

- The priorities puts the pathfind call at the top of the queue list, if there is even a queue
- Recommended you avoid having maxPFRange over 64 unless you make sure its called rarely
- Pathfind calls that take over 5 seconds to get to in the queue are automatically aborted, prevents a buildup of the queue incase you overload it with jobs.

Current Limitations:
--------------------

- At the moment this version requires an override on updateEntityActionState that uses the new PathEntityEx as well as a couple references to Tropicraft entity classes in PFQueue

Future:
-------
Will probably eventually try to extend PathEntity for backwards compatibility on vanilla mobs, and use reflection to update any fields that Notch didnt provide public access to (and theres a lot of those), but depending on the rate of access required it might become a performance issue.